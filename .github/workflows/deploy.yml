name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      run: |
        # Build Docker image
        docker build -f apps/backend/Dockerfile -t get-convinced-prod-backend --platform linux/amd64 .
        
        # Login to ECR
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        
        # Tag and push image
        docker tag get-convinced-prod-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/get-convinced-prod-backend:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/get-convinced-prod-backend:latest
    
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster get-convinced-prod-cluster \
          --service backend \
          --force-new-deployment \
          --region ${{ secrets.AWS_REGION }}
    
    - name: Wait for deployment to complete
      run: |
        echo "Waiting for ECS service to stabilize..."
        aws ecs wait services-stable \
          --cluster get-convinced-prod-cluster \
          --services backend \
          --region ${{ secrets.AWS_REGION }}
    
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        sleep 30  # Wait for ALB to register new targets
        
        # Check health endpoint
        HEALTH_URL="http://get-convinced-prod-alb-638605407.ap-south-1.elb.amazonaws.com/health"
        for i in {1..5}; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "✅ Health check passed"
            break
          else
            echo "⏳ Health check failed, retrying in 30s... (attempt $i/5)"
            sleep 30
          fi
        done
        
        # Final health check
        curl -f -s "$HEALTH_URL" || (echo "❌ Health check failed after 5 attempts" && exit 1)
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
